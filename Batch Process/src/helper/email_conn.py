import smtplib
from email.mime.base import MIMEBase
from email import encoders
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from helper.log.logging import logger 
from helper.utils import get_jinja_temp

class Email():
	def __init__(self, email_cfg, S3, FM):
		self.email_cfg=email_cfg
		self.S3 = S3
		self.FM=FM
		self.process_cfg()

	def process_cfg(self):
		self.email_cfg['Sender'] = 'donotreply@invesco.com'
		self.email_cfg['Subject'] = self.get_email_subject()
		self.email_cfg['To'] = self.get_recipients()
		self.email_cfg['CC'] = self.get_cc_recipients()
		self.email_cfg['Body'] = self.get_body()
		self.email_cfg['Attachment'] = self.get_attachment()

	def get_email_subject(self):
		STD_EMAIL_SUBJ = "Notification generated by CRD Batch Framework"
		return self.email_cfg.get('Subject') if self.email_cfg.get('Subject') else STD_EMAIL_SUBJ

	def get_recipients(self):
		recipients=self.email_cfg['To']
		email_list=[email.strip() for email in list(recipients.split(','))]
		email_str=','.join(email_list)
		return email_str

	def get_cc_recipients(self):
		if self.email_cfg.get('CC'):
			recipients=self.email_cfg['CC']
			email_list=[email.strip() for email in list(recipients.split(','))]
			email_str=','.join(email_list)
			return email_str
		return None
	
	def get_body_content(self, cfg):
		if cfg.get('BodyContent'):
			body = cfg.get('BodyContent')
		elif cfg.get('BodyTemplate'):
			template_file = cfg.get('BodyTemplate')
			body = get_jinja_temp(S3=self.S3, path=template_file, df=self.FM.df)
		else:
			body = "This is autogenerated mail from CRD Batch Framework."
		return body
	
	def get_body(self):
		body = self.get_body_content(cfg = self.email_cfg)
		if self.email_cfg.get('Attachment'):
			attached = self.email_cfg.get('Attachment')
			body = self.get_body_content( cfg = attached )
		return body
	
	def get_attachment(self):
		if self.FM.df is not None:
			if self.email_cfg.get('Attachment'):
				attachement = self.email_cfg.get('Attachment')
				if attachement.get('FileConfig'):
					cfg = {'S3': attachement}
					from helper.utils import put_extract_to_tmp_folder
					local_key = put_extract_to_tmp_folder(self.FM, cfg)
					return local_key
		return None

	def setup_email_structure(self,local_key):
		from pathlib import Path
		msg = MIMEMultipart()
		msg['From'] = self.email_cfg['Sender']
		msg['To'] = self.email_cfg['To']
		msg['Subject'] = self.email_cfg['Subject']
		msg.attach(MIMEText(self.email_cfg.get('Body'),'html'))
		if self.email_cfg.get('Attachment'):
			part = MIMEBase('application', "octet-stream")
			fp = open(self.email_cfg['Attachment'], 'rb')
			part.set_payload(fp.read())
			fp.close()
			fn= Path(self.email_cfg['Attachment']).name
			encoders.encode_base64(part)
			part.add_header('Content-Disposition', 'attachment; filename='+fn.lower())
			msg.attach(part)
		return msg

	def send_email(self, local_key=None):
		msg=self.setup_email_structure(local_key=local_key)
		SmtpSrv = 'emailnasmtp.app.invesco.net'
		port = 25
		try:
			server = smtplib.SMTP(SmtpSrv, port)
		except Exception as e:
			logger.exception(e)
		server.send_message(msg)